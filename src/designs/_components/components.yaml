compound_components:
  version: 0.4         # REQUIRED version number
  classes:
  - name: intmac
    attributes:
      technology: "must_specify"
      multiplier_width: "must_specify"
      adder_width: "must_specify"
      global_cycle_seconds: "must_specify"

    subcomponents:
    - name: intadder
      class: aladdin_adder
      attributes: {width: adder_width}
    
    - name: intmultiplier
      class: aladdin_adder
      attributes: {width_a: multiplier_width, width_b: multiplier_width}

    actions:
    - name: compute
      subcomponents:
      - name: intadder
        actions: [{name: read}]
      - name: intmultiplier
        actions: [{name: read}]
    - name: leak
      subcomponents:
      - name: intadder
        actions: [{name: leak}]
      - name: intmultiplier
        actions: [{name: leak}]
  
  - name: smartbuffer_metadata
    attributes:
      technology: "must_specify"
      width: "must_specify"
      depth: "must_specify"
      metadata_storage_width: "must_specify"
      metadata_storage_depth: "must_specify"
      n_rdwr_ports: 1
      metadata_counter_width: 0

    subcomponents:
      - name: storage
        class: smartbuffer_SRAM
        attributes:
          technology: technology
          width: width
          depth: depth
          n_rdwr_ports: n_rdwr_ports
      
      - name: metadata_storage
        class: smartbuffer_SRAM
        attributes:
          technology: technology
          width: metadata_storage_width
          depth: metadata_storage_depth
          n_rdwr_ports: n_rdwr_ports
  
      - name: metadata_counters[0..1] # one for read, one for write
        class: intadder
        attributes:
          technology: technology
          datawidth: metadata_counter_width

    actions:
      - name: read
        subcomponents:
          - {name: storage, actions: [{name: read}]}
      - &write_action
        name: write
        subcomponents:
          - {name: storage, actions: [{name: write}]}
      - name: update
        <<: *write_action

      - name: metadata_read
        subcomponents:
          - {name: metadata_storage, actions: [{name: read}]}
      - &metadata_write
        name: metadata_write
        subcomponents:
          - {name: metadata_storage, actions: [{name: write}]}
      - name: metadata_update
        <<: *metadata_write
      
      - name: leak
        subcomponents:
          - {name: storage, actions: [{name: leak, arguments: {global_cycle_seconds: global_cycle_seconds}}]}
          - {name: metadata_storage, actions: [{name: leak, arguments: {global_cycle_seconds: global_cycle_seconds}}]}

      - name: decompression_count
        subcomponents:
          - name: metadata_counters[1]
            actions:
              - name: add
      - name: compression_count
        subcomponents:
          - name: metadata_counters[0]
            actions:
              - name: add
  
  - name: smartbuffer_RF
    attributes:
      technology: "must_specify"
      width: "must_specify"
      depth: "must_specify"
      # CACTI requires >= 4B wide and >= 64 entries deep
      memory_width: max(32, width)
      memory_depth: max(64, depth)
      widthscale: width / memory_width
      depthscale: depth / memory_depth
      real_depth: depth

      area_scale: widthscale * depthscale
      # CACTI scaling: 2x depth --> 1.56x dynamic power
      dynamic_energy_scale: widthscale * (depthscale ** (1.56 / 2))
      static_energy_scale: area_scale # Leakage proportional to area
      n_rdwr_ports: 1 # Can be overwridden
      global_cycle_seconds: "must_specify"
      

    subcomponents:
    - name: storage
      class: regfile
      area_scale: area_scale
      attributes:
        width: memory_width
        depth: memory_depth
        n_rdwr_ports: n_rdwr_ports
        global_cycle_seconds: global_cycle_seconds
    
    # We don't need to scale the address generators
    - name: address_generators[0..1] 
      class: intadder
      attributes:
        n_bits: max(1, ceil(log2(real_depth))) if real_depth >= 1 else 1
        precision: max(1, ceil(log2(real_depth))) if real_depth >= 1 else 1
        datawidth: max(1, ceil(log2(real_depth))) if real_depth >= 1 else 1
        global_cycle_seconds: global_cycle_seconds

    actions:
    - &write_action
      name: write 
      subcomponents:
      - name: storage
        actions: [{name: write, energy_scale: dynamic_energy_scale}]
      - name: address_generators[0]
        actions: [{name: add}]
    - name: read
      subcomponents:
      - name: storage
        actions: [{name: read, energy_scale: dynamic_energy_scale}]
      - name: address_generators[1]
        actions: [{name: add}]
    - name: leak
      subcomponents:
      - name: storage
        actions: [{name: leak, energy_scale: static_energy_scale}]
      - name: address_generators[0..1]
        actions: [{name: leak}]
    - name: update
      << : *write_action # Update is the same as write
  
  - name: smartbuffer_SRAM
    attributes:
      technology: "must_specify"
      width: "must_specify"
      depth: "must_specify"
      n_rw_ports: 1
      global_cycle_seconds: "must_specify"

    subcomponents:
    - name: storage
      class: SRAM
      attributes:
        width: width
        depth: depth
        n_rw_ports: n_rw_ports
        technology: technology
        global_cycle_seconds: global_cycle_seconds
    
    # We don't need to scale the address generators
    - name: address_generators[0..1] 
      class: intadder
      attributes:
        n_bits: max(1, ceil(log2(depth))) if depth >= 1 else 1
        precision: max(1, ceil(log2(depth))) if depth >= 1 else 1
        datawidth: max(1, ceil(log2(depth))) if depth >= 1 else 1
        global_cycle_seconds: global_cycle_seconds

    actions:
    - &write_action
      name: write 
      subcomponents:
      - name: storage
        actions: [{name: write}]
      - name: address_generators[0]
        actions: [{name: add}]
    - name: read
      subcomponents:
      - name: storage
        actions: [{name: read}]
      - name: address_generators[1]
        actions: [{name: add}]
    - name: leak
      subcomponents:
      - name: storage
        actions: [{name: leak}]
      - name: address_generators[0..1]
        actions: [{name: leak}]
    - name: update
      << : *write_action # Update is the same as write
